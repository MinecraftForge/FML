--- ../src-base/minecraft_server/net/minecraft/src/WorldType.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src-work/minecraft_server/net/minecraft/src/WorldType.java	0000-00-00 00:00:00.000000000 -0000
@@ -1,5 +1,9 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 public class WorldType
 {
     public static final WorldType[] field_48459_a = new WorldType[16];
@@ -11,17 +15,28 @@
     private boolean field_48455_g;
     private boolean field_48460_h;
 
-    private WorldType(int p_i1025_1_, String p_i1025_2_)
+    protected BiomeGenBase[] biomesForWorldType;
+    
+    protected WorldType(int p_i1025_1_, String p_i1025_2_)
     {
         this(p_i1025_1_, p_i1025_2_, 0);
     }
 
-    private WorldType(int p_i1026_1_, String p_i1026_2_, int p_i1026_3_)
+    protected WorldType(int p_i1026_1_, String p_i1026_2_, int p_i1026_3_)
     {
         this.field_46052_c = p_i1026_2_;
         this.field_48454_f = p_i1026_3_;
         this.field_48455_g = true;
         field_48459_a[p_i1026_1_] = this;
+        switch (p_i1026_1_) {
+            case 8:
+                biomesForWorldType = new BiomeGenBase[] { BiomeGenBase.field_4293_h, BiomeGenBase.field_4297_d, BiomeGenBase.field_35518_e,
+                        BiomeGenBase.field_4299_b, BiomeGenBase.field_35520_c, BiomeGenBase.field_4294_g };
+                break;
+            default:
+                biomesForWorldType = new BiomeGenBase[] { BiomeGenBase.field_4293_h, BiomeGenBase.field_4297_d, BiomeGenBase.field_35518_e,
+                        BiomeGenBase.field_4299_b, BiomeGenBase.field_35520_c, BiomeGenBase.field_4294_g, BiomeGenBase.field_48443_w };
+        }            
     }
 
     public String func_48449_a()
@@ -68,4 +83,41 @@
 
         return null;
     }
+
+    public WorldChunkManager getChunkManager(World world)
+    {
+       return this == field_48458_c ? new WorldChunkManagerHell(BiomeGenBase.field_35520_c, 0.5F, 0.5F) : new WorldChunkManager(world);
+    }
+
+    public IChunkProvider getChunkGenerator(World var1)
+    {
+        return this == field_48458_c ? new ChunkProviderFlat(var1, var1.func_22079_j(), var1.func_22081_n().func_35499_o()) : new ChunkProviderGenerate(var1, var1.func_22079_j(), var1.func_22081_n().func_35499_o());
+    }
+
+    public int getMinimumSpawnHeight(World world)
+    {
+        return this == field_48458_c ? 4 : 64;
+    }
+
+    public BiomeGenBase[] getBiomesForWorldType() {
+        return biomesForWorldType;
+    }
+    
+    public void addNewBiome(BiomeGenBase biome) {
+		List<BiomeGenBase> newBiomesForWorld = new ArrayList<BiomeGenBase>();
+		newBiomesForWorld.addAll(Arrays.asList(biomesForWorldType));
+		
+		if (!newBiomesForWorld.contains(biome))
+			newBiomesForWorld.add(biome);
+		biomesForWorldType = newBiomesForWorld.toArray(new BiomeGenBase[0]);
+    }
+    
+    public void removeBiome(BiomeGenBase biome) {
+		List<BiomeGenBase> newBiomesForWorld = new ArrayList<BiomeGenBase>();
+		newBiomesForWorld.addAll(Arrays.asList(biomesForWorldType));
+		
+		newBiomesForWorld.remove(biome);
+		biomesForWorldType = newBiomesForWorld.toArray(new BiomeGenBase[0]);
+    }
+
 }
